package main

import (
	"context"
	"fmt"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/config"
	"github.com/aws/aws-sdk-go-v2/service/secretsmanager"
	"github.com/manifoldco/promptui"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

func main1() {
	// Load AWS config
	cfg, err := config.LoadDefaultConfig(context.TODO())
	if err != nil {
		log.Fatalf("unable to load SDK config, %v", err)
	}

	// Create Secrets Manager client
	svc := secretsmanager.NewFromConfig(cfg)

	// Prompt for Secret ID
	prompt := promptui.Prompt{
		Label: "Enter the Secret ID",
	}
	secretID, err := prompt.Run()
	if err != nil {
		log.Fatalf("Prompt failed %v\n", err)
	}

	// Retrieve the current secret value
	secretValue, err := getSecretValue(svc, secretID)
	if err != nil {
		log.Fatalf("Failed to get secret value: %v", err)
	}

	// Parse JSON keys
	keys := gjson.Get(secretValue, "@this").Map()

	// Prompt to select a key
	var keyOptions []string
	for key := range keys {
		keyOptions = append(keyOptions, key)
	}

	keyPrompt := promptui.Select{
		Label: "Select Key to Update",
		Items: keyOptions,
	}
	_, selectedKey, err := keyPrompt.Run()
	if err != nil {
		log.Fatalf("Failed to select key: %v", err)
	}

	// Prompt for new value
	valuePrompt := promptui.Prompt{
		Label: fmt.Sprintf("Enter new value for %s", selectedKey),
	}
	newValue, err := valuePrompt.Run()
	if err != nil {
		log.Fatalf("Prompt failed %v\n", err)
	}

	// Update the JSON with the new value
	updatedSecret, err := sjson.Set(secretValue, selectedKey, newValue)
	if err != nil {
		log.Fatalf("Failed to update secret JSON: %v", err)
	}

	// Update the secret in Secrets Manager
	err = updateSecret(svc, secretID, updatedSecret)
	if err != nil {
		log.Fatalf("Failed to update secret: %v", err)
	}

	fmt.Println("Secret updated successfully")
}

func getSecretValue1(svc *secretsmanager.Client, secretID string) (string, error) {
	input := &secretsmanager.GetSecretValueInput{
		SecretId: aws.String(secretID),
	}

	result, err := svc.GetSecretValue(context.TODO(), input)
	if err != nil {
		return "", err
	}

	return *result.SecretString, nil
}

func updateSecret1(svc *secretsmanager.Client, secretID string, updatedSecret string) error {
	input := &secretsmanager.UpdateSecretInput{
		SecretId:     aws.String(secretID),
		SecretString: aws.String(updatedSecret),
	}

	_, err := svc.UpdateSecret(context.TODO(), input)
	return err
}
